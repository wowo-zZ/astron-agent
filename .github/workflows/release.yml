name: Release Astron Agent

on:
  push:
    tags:
      - 'v*.*.*'      # 匹配语义版本号 (v1.0.0, v2.1.3, etc.)
      - 'v*.*.*-*'    # 匹配预发布版本 (v1.0.0-beta.1, v2.1.0-rc.1, etc.)
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

env:
  REGISTRY_GHCR: ghcr.io

jobs:
  # ============================================================================
  # Stage 1: 验证和准备
  # ============================================================================
  prepare-release:
    name: 🚀 准备发布
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      is-prerelease: ${{ steps.meta.outputs.is-prerelease }}
      has-core-services: ${{ steps.detect.outputs.has-core-services }}
      has-console-hub: ${{ steps.detect.outputs.has-console-hub }}
      has-console-frontend: ${{ steps.detect.outputs.has-console-frontend }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录用于生成changelog

      - name: 验证标签格式
        id: meta
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.tag }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
            # 检查是否为预发布版本 (包含 -, alpha, beta, rc 等)
            if [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              IS_PRERELEASE="false"
            else
              IS_PRERELEASE="true"
            fi
          fi
          
          # 验证版本号格式
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "❌ 错误的版本号格式: $VERSION"
            echo "✅ 正确格式: v1.0.0, v1.0.0-beta.1, v1.0.0-rc.1"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "🏷️ 发布版本: $VERSION"
          echo "🔖 预发布版本: $IS_PRERELEASE"

      - name: 智能项目检测
        id: detect
        run: |
          echo "🔍 检测 Astron Agent 组件..."

          HAS_CORE_SERVICES="false"
          HAS_CONSOLE_HUB="false"
          HAS_CONSOLE_FRONTEND="false"

          # 检测Core服务组件 (基于build-push.yml的结构)
          CORE_COMPONENTS=("tenant" "memory/database" "plugin/rpa" "plugin/link" "plugin/aitools" "agent" "knowledge" "workflow")
          CORE_COUNT=0

          for component in "${CORE_COMPONENTS[@]}"; do
            if [[ -f "core/${component}/Dockerfile" ]]; then
              CORE_COUNT=$((CORE_COUNT + 1))
              echo "✅ Core组件: core/${component}/"
            fi
          done

          if [[ $CORE_COUNT -gt 0 ]]; then
            HAS_CORE_SERVICES="true"
            echo "✅ 检测到 $CORE_COUNT 个Core服务组件"
          fi

          # 检测Console Hub (Java)
          if [[ -f "console/backend/hub/pom.xml" && -f "console/backend/hub/Dockerfile" ]]; then
            HAS_CONSOLE_HUB="true"
            echo "✅ Console Hub: console/backend/hub/ (Java Spring Boot)"
          fi

          # 检测Console Frontend (React)
          if [[ -f "console/frontend/package.json" && -f "console/frontend/Dockerfile" ]]; then
            HAS_CONSOLE_FRONTEND="true"
            echo "✅ Console Frontend: console/frontend/ (React)"
          fi

          echo "has-core-services=$HAS_CORE_SERVICES" >> $GITHUB_OUTPUT
          echo "has-console-hub=$HAS_CONSOLE_HUB" >> $GITHUB_OUTPUT
          echo "has-console-frontend=$HAS_CONSOLE_FRONTEND" >> $GITHUB_OUTPUT

      - name: 生成变更日志
        id: changelog
        run: |
          echo "📝 生成变更日志..."
          
          # 获取上一个标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG="${{ steps.meta.outputs.version }}"
          
          if [[ -z "$PREVIOUS_TAG" ]]; then
            echo "🆕 这是第一个发布版本"
            COMMIT_RANGE="HEAD"
          else
            echo "📊 对比版本: $PREVIOUS_TAG...$CURRENT_TAG"
            COMMIT_RANGE="$PREVIOUS_TAG..HEAD"
          fi
          
          # 创建简单的changelog
          CHANGELOG_FILE="/tmp/changelog.md"
          
          # 写入标题
          echo "## 🚀 主要变更" > "$CHANGELOG_FILE"
          echo "" >> "$CHANGELOG_FILE"
          
          # 获取并分类提交
          echo "### ✨ 新功能" >> "$CHANGELOG_FILE"
          if git log --pretty=format:"%s" $COMMIT_RANGE | grep "^feat" | sed 's/^feat[^:]*: /- /' >> "$CHANGELOG_FILE"; then
            true
          else
            echo "- 暂无新功能" >> "$CHANGELOG_FILE"
          fi
          
          echo "" >> "$CHANGELOG_FILE"
          echo "### 🐛 问题修复" >> "$CHANGELOG_FILE"
          if git log --pretty=format:"%s" $COMMIT_RANGE | grep "^fix" | sed 's/^fix[^:]*: /- /' >> "$CHANGELOG_FILE"; then
            true
          else
            echo "- 暂无问题修复" >> "$CHANGELOG_FILE"
          fi
          
          echo "" >> "$CHANGELOG_FILE"
          echo "### 🔧 其他改进" >> "$CHANGELOG_FILE"
          if git log --pretty=format:"%s" $COMMIT_RANGE | grep -E "^(chore|docs|refactor|test|ci)" | sed 's/^[^:]*: /- /' >> "$CHANGELOG_FILE"; then
            true
          else
            echo "- 暂无其他改进" >> "$CHANGELOG_FILE"
          fi
          
          # 添加Docker镜像信息
          echo "" >> "$CHANGELOG_FILE"
          echo "## 📦 Docker镜像" >> "$CHANGELOG_FILE"
          echo "" >> "$CHANGELOG_FILE"

          if [[ "${{ steps.detect.outputs.has-core-services }}" == "true" ]]; then
            echo "### 🏗️ Core服务组件" >> "$CHANGELOG_FILE"
            echo "- 🏢 Core Tenant: ghcr.io/${{ github.repository }}/core-tenant:$CURRENT_TAG" >> "$CHANGELOG_FILE"
            echo "- 🧠 Core Memory: ghcr.io/${{ github.repository }}/core-memory:$CURRENT_TAG" >> "$CHANGELOG_FILE"
            echo "- 🤖 Core RPA: ghcr.io/${{ github.repository }}/core-rpa:$CURRENT_TAG" >> "$CHANGELOG_FILE"
            echo "- 🔗 Core Link: ghcr.io/${{ github.repository }}/core-link:$CURRENT_TAG" >> "$CHANGELOG_FILE"
            echo "- 🛠️ Core AI Tools: ghcr.io/${{ github.repository }}/core-aitools:$CURRENT_TAG" >> "$CHANGELOG_FILE"
            echo "- 🤖 Core Agent: ghcr.io/${{ github.repository }}/core-agent:$CURRENT_TAG" >> "$CHANGELOG_FILE"
            echo "- 📚 Core Knowledge: ghcr.io/${{ github.repository }}/core-knowledge:$CURRENT_TAG" >> "$CHANGELOG_FILE"
            echo "- ⚡ Core Workflow: ghcr.io/${{ github.repository }}/core-workflow:$CURRENT_TAG" >> "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
          fi

          if [[ "${{ steps.detect.outputs.has-console-hub }}" == "true" ]]; then
            echo "### 🎯 Console服务" >> "$CHANGELOG_FILE"
            echo "- ☕ Console Hub: ghcr.io/${{ github.repository }}/console-hub:$CURRENT_TAG" >> "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
          fi

          if [[ "${{ steps.detect.outputs.has-console-frontend }}" == "true" ]]; then
            echo "### 🌐 前端应用" >> "$CHANGELOG_FILE"
            echo "- 🟦 Console Frontend: ghcr.io/${{ github.repository }}/console-frontend:$CURRENT_TAG" >> "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
          fi

          # 添加使用说明
          echo "## 📋 使用说明" >> "$CHANGELOG_FILE"
          echo "" >> "$CHANGELOG_FILE"
          echo "### 快速开始" >> "$CHANGELOG_FILE"
          echo '```bash' >> "$CHANGELOG_FILE"
          echo "# 克隆项目" >> "$CHANGELOG_FILE"
          echo "git clone https://github.com/${{ github.repository }}.git" >> "$CHANGELOG_FILE"
          echo "cd astron-agent" >> "$CHANGELOG_FILE"
          echo "git checkout $CURRENT_TAG" >> "$CHANGELOG_FILE"
          echo "" >> "$CHANGELOG_FILE"
          echo "# 使用Docker Compose运行" >> "$CHANGELOG_FILE"
          echo "docker-compose up -d" >> "$CHANGELOG_FILE"
          echo "" >> "$CHANGELOG_FILE"
          echo "# 或者单独拉取镜像" >> "$CHANGELOG_FILE"
          if [[ "${{ steps.detect.outputs.has-console-frontend }}" == "true" ]]; then
            echo "docker pull ghcr.io/${{ github.repository }}/console-frontend:$CURRENT_TAG" >> "$CHANGELOG_FILE"
          fi
          if [[ "${{ steps.detect.outputs.has-console-hub }}" == "true" ]]; then
            echo "docker pull ghcr.io/${{ github.repository }}/console-hub:$CURRENT_TAG" >> "$CHANGELOG_FILE"
          fi
          echo '```' >> "$CHANGELOG_FILE"
          
          # 输出到GitHub Output
          {
            echo "changelog<<EOF"
            cat "$CHANGELOG_FILE"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
          echo "📄 变更日志已生成"

  # ============================================================================
  # Stage 2: 构建Docker镜像 (复用build-push的逻辑)
  # ============================================================================
  build-core-services:
    name: 🏗️ 构建Core服务
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.has-core-services == 'true'
    strategy:
      matrix:
        service:
          - { name: "tenant", path: "core/tenant", emoji: "🏢" }
          - { name: "memory", path: "core/memory/database", emoji: "🧠" }
          - { name: "rpa", path: "core/plugin/rpa", emoji: "🤖" }
          - { name: "link", path: "core/plugin/link", emoji: "🔗" }
          - { name: "aitools", path: "core/plugin/aitools", emoji: "🛠️" }
          - { name: "agent", path: "core/agent", emoji: "🤖" }
          - { name: "knowledge", path: "core/knowledge", emoji: "📚" }
          - { name: "workflow", path: "core/workflow", emoji: "⚡" }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/core-${{ matrix.service.name }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=${{ needs.prepare-release.outputs.version }}

      - name: Build and push ${{ matrix.service.emoji }} ${{ matrix.service.name }} image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.service.path }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.prepare-release.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-console-hub:
    name: ☕ 构建Console Hub
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.has-console-hub == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 添加Maven依赖缓存 - 仅用于console-hub
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-hub-${{ hashFiles('console/backend/hub/pom.xml', 'console/backend/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-hub-
            ${{ runner.os }}-maven-

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:master

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/console-hub
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=${{ needs.prepare-release.outputs.version }}

      - name: Build and push Console Hub image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./console/backend/hub/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.prepare-release.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: |
            type=gha,scope=console-hub
            type=gha,scope=console-hub-build
            type=registry,ref=${{ env.REGISTRY_GHCR }}/${{ github.repository }}/console-hub:buildcache
          cache-to: |
            type=gha,scope=console-hub,mode=max
            type=registry,ref=${{ env.REGISTRY_GHCR }}/${{ github.repository }}/console-hub:buildcache,mode=max
          provenance: false
          sbom: false

  build-console-frontend:
    name: 🌐 构建Console Frontend
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.has-console-frontend == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/console-frontend
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=${{ needs.prepare-release.outputs.version }}

      - name: Build and push Console Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./console/frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.prepare-release.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # Stage 3: 创建GitHub Release
  # ============================================================================
  create-release:
    name: 🎉 创建GitHub Release
    runs-on: ubuntu-latest
    needs:
      - prepare-release
      - build-core-services
      - build-console-hub
      - build-console-frontend
    if: always() && needs.prepare-release.result == 'success'
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          name: "Astron Agent ${{ needs.prepare-release.outputs.version }}"
          body: ${{ needs.prepare-release.outputs.changelog }}
          prerelease: ${{ needs.prepare-release.outputs.is-prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 发布总结
        run: |
          echo "=== 🎉 Astron Agent 发布总结 ==="
          echo ""
          echo "🏷️ 版本: ${{ needs.prepare-release.outputs.version }}"
          echo "🔖 预发布: ${{ needs.prepare-release.outputs.is-prerelease }}"
          echo "📦 发布页面: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.version }}"
          echo ""

          echo "🐳 Docker镜像构建状态:"
          echo "  🏗️ Core服务: ${{ needs.build-core-services.result }}"
          echo "  ☕ Console Hub: ${{ needs.build-console-hub.result }}"
          echo "  🌐 Console Frontend: ${{ needs.build-console-frontend.result }}"
          echo ""

          echo "🎯 快速开始:"
          echo "git clone https://github.com/${{ github.repository }}.git"
          echo "cd astron-agent"
          echo "git checkout ${{ needs.prepare-release.outputs.version }}"
          echo "docker-compose up -d"
          echo ""

          echo "✅ 🚀 Astron Agent 发布完成!"