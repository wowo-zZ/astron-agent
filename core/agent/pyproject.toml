[project]
name = "agent"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "aiohttp>=3.11.14",
    "fastapi>=0.115.12",
    "openai>=1.69.0",
    "pydantic-settings>=2.8.1",
    "pymysql>=1.1.1",
    "snowflake-id>=1.0.2",
    "sqlalchemy==2.0.30",
    "redis-py-cluster>=2.1.3",
    "uvicorn>=0.34.0",
    # Common package dependencies
    "loguru>=0.7.2",
    "sqlmodel>=0.0.14",
    "confluent-kafka>=2.5.0",
    "opentelemetry-api>=1.25.0",
    "opentelemetry-exporter-otlp-proto-grpc>=1.25.0",
    "opentelemetry-proto>=1.25.0",
    "opentelemetry-sdk>=1.25.0",
    "opentelemetry-semantic-conventions>=0.46b0",
    "opentelemetry-exporter-opencensus>=0.46b0",
    "opentelemetry-exporter-otlp>=1.25.0",
    "grpc-google-iam-v1==0.12.6",
    "googleapis-common-protos==1.60.0",
    "websocket-client==1.8.0",
    "python-dotenv>=1.0.1",
    "toml>=0.10.2",
    "websockets==12.0",
    # Testing dependencies
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    "coverage>=7.4.0",
    "httpx>=0.27.0",  # For testing FastAPI
    "faker>=26.0.0",  # For generating test data
]

# Black formatter configuration
[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311"]
include = "\\.pyi?$"
extend-exclude = '''
/(
  # Directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.nox
  | \\.tox
  | \\.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort import sorting configuration  
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
ensure_newline_before_comments = true
force_grid_wrap = 0
known_first_party = ["api", "core", "middleware", "exceptions"]
skip = [".mypy_cache", "__pycache__", "build", "dist", ".eggs", ".git"]

# MyPy static type checking configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
pretty = true
ignore_missing_imports = true
exclude = ["build/", "dist/", ".eggs/", "../common/"]

# Per-module options for pytest
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_decorators = false

# Pylint static analysis configuration
[tool.pylint.main]
jobs = 0
py-version = "3.11"

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring", 
    "missing-function-docstring",
    "import-error",
    "wrong-import-order",
    "too-few-public-methods",
    "unused-import",
]

[tool.pylint.format]
max-line-length = 88
indent-string = "    "

[tool.pylint.basic]
good-names = [
    "i", "j", "k", "ex", "Run", "_", "id", "db", "app", "pk", "up", "rv"
]

[tool.pylint.design]
max-args = 7
max-locals = 15
max-returns = 6
max-branches = 12
max-statements = 50
max-parents = 7
max-attributes = 7
min-public-methods = 2
max-public-methods = 20

[tool.pylint.similarities]
min-similarity-lines = 4
ignore-comments = true
ignore-docstrings = true
ignore-imports = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--color=yes",
    "--durations=10",
    "--cov=api",
    "--cov=service",
    "--cov=engine",
    "--cov=domain",
    "--cov=repository",
    "--cov=cache",
    "--cov=infra",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=70",
    "--cov-config=pyproject.toml",
]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
log_cli = false
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:coverage.*",
    "ignore::pytest.PytestUnraisableExceptionWarning",
]
markers = [
    "unit: 单元测试",
    "slow: 慢速测试",
    "asyncio: 异步测试",
    "parametrize: 参数化测试",
]

# Coverage configuration
[tool.coverage.run]
source = ["api", "service", "engine", "domain", "repository", "cache", "infra"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "main.py",
    "scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*Protocol\\):",
    "@(abc\\.)?abstractmethod",
]
